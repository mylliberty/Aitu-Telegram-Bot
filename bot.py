from aiogram import Bot, Dispatcher, types, Router
from aiogram.enums import ParseMode
from aiogram.filters import Command
from aiogram.client.default import DefaultBotProperties
import os
import requests
from dotenv import load_dotenv
import asyncio
import redis
from handlers import router

load_dotenv()
r = redis.Redis(host='localhost', port=6379, decode_responses=True)

CLIENT_ID = os.getenv("CLIENT_ID")
CLIENT_SECRET = os.getenv("CLIENT_SECRET")
TENANT_ID = os.getenv("TENANT_ID")
TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
REDIRECT_URI = "http://localhost:5000/callback"

bot = Bot(token=TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.HTML))
dp = Dispatcher()
dp.include_router(router)

# –ö–æ–º–∞–Ω–¥–∞ /start
@router.message(Command("start"))
async def start_command(message: types.Message):
    user_id = str(message.from_user.id)
    access_token = r.get(user_id)  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ç–æ–∫–µ–Ω –≤ Redis

    if access_token:
        email = get_user_email(access_token)
        if email:
            role = define_role(email)
            await message.answer(f"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {email}!\n–í–∞—à–∞ —Ä–æ–ª—å: {role}.")
        else:
            await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å email. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è –∑–∞–Ω–æ–≤–æ: /login")
    else:
        await message.answer("–ü—Ä–∏–≤–µ—Ç! –ß—Ç–æ–±—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º, –∞–≤—Ç–æ—Ä–∏–∑—É–π—Ç–µ—Å—å: /login")

# –ö–æ–º–∞–Ω–¥–∞ /login
@router.message(Command("login"))
async def send_login_link(message: types.Message):
    auth_url = (
        f"https://login.microsoftonline.com/{TENANT_ID}/oauth2/v2.0/authorize"
        f"?client_id={CLIENT_ID}"
        f"&response_type=code"
        f"&redirect_uri={REDIRECT_URI}"
        f"&response_mode=query"
        f"&scope=User.Read Mail.Read"
        f"&state={message.from_user.id}"
    )
    await message.answer(f"–î–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –ø–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ: [–í–æ–π—Ç–∏]({auth_url})", parse_mode="Markdown")

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è email –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
def get_user_email(access_token):
    headers = {"Authorization": f"Bearer {access_token}"}
    url = "https://graph.microsoft.com/v1.0/me"
    response = requests.get(url, headers=headers)

    if response.status_code == 200:
        return response.json().get("mail")
    return None

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ä–æ–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
def define_role(email):
    if email:
        local_part = email.split("@")[0]  # –ë–µ—Ä–µ–º —á–∞—Å—Ç—å –¥–æ "@"
        if local_part.isdigit():  # –ï—Å–ª–∏ —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã, –∑–Ω–∞—á–∏—Ç —Å—Ç—É–¥–µ–Ω—Ç
            return "–°—Ç—É–¥–µ–Ω—Ç"
        else:  # –ï—Å–ª–∏ –µ—Å—Ç—å –±—É–∫–≤—ã, –∑–Ω–∞—á–∏—Ç –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å
            return "–ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å / –°–æ—Ç—Ä—É–¥–Ω–∏–∫"
    return "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è —Ä–æ–ª—å"

# –ö–æ–º–∞–Ω–¥–∞ /inbox
@router.message(Command("inbox"))
async def get_inbox(message: types.Message):
    user_id = str(message.from_user.id)
    access_token = r.get(user_id)

    if not access_token:
        await message.answer("–í—ã –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã! –í–≤–µ–¥–∏—Ç–µ /login.")
        return

    headers = {"Authorization": f"Bearer {access_token}"}
    url = "https://graph.microsoft.com/v1.0/me/messages?$top=5&$orderby=receivedDateTime DESC"
    response = requests.get(url, headers=headers)

    if response.status_code == 200:
        emails = response.json().get("value", [])
        if not emails:
            await message.answer("–í—Ö–æ–¥—è—â–∏–µ –ø—É—Å—Ç—ã.")
            return

        email_list = []
        for email in emails:
            subject = email.get("subject", "–ë–µ–∑ —Ç–µ–º—ã")
            sender = email.get("from", {}).get("emailAddress", {}).get("address", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å")
            email_list.append(f"üì© <b>{subject}</b>\n–û—Ç: {sender}\n")

        await message.answer("\n".join(email_list), parse_mode="HTML")
    else:
        await message.answer(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–∏—Å–µ–º: {response.status_code}")


# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –æ –ø–∏—Å—å–º–µ (user_id: {recipient, message})
email_draft = {}

# –ö–æ–º–∞–Ω–¥–∞ /sendemail - –∑–∞–ø—Ä–æ—Å email –ø–æ–ª—É—á–∞—Ç–µ–ª—è
@router.message(Command("sendemail"))
async def ask_recipient(message: types.Message):
    user_id = str(message.from_user.id)
    access_token = r.get(user_id)

    if not access_token:
        await message.answer("–í—ã –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã! –í–≤–µ–¥–∏—Ç–µ /login.")
        return

    email_draft[user_id] = {}  # –°–æ–∑–¥–∞–µ–º —á–µ—Ä–Ω–æ–≤–∏–∫ –ø–∏—Å—å–º–∞
    await message.answer("–í–≤–µ–¥–∏—Ç–µ email –ø–æ–ª—É—á–∞—Ç–µ–ª—è:")


# –ü–æ–ª—É—á–∞–µ–º email –ø–æ–ª—É—á–∞—Ç–µ–ª—è –∏ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Ç–µ–∫—Å—Ç –ø–∏—Å—å–º–∞
@router.message()
async def ask_email_body(message: types.Message):
    user_id = str(message.from_user.id)

    if user_id in email_draft and "recipient" not in email_draft[user_id]:
        email_draft[user_id]["recipient"] = message.text
        await message.answer("–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –ø–∏—Å—å–º–∞:")

    elif user_id in email_draft and "recipient" in email_draft[user_id]:
        email_draft[user_id]["message"] = message.text
        recipient = email_draft[user_id]["recipient"]
        email_body = email_draft[user_id]["message"]

        result = send_email(user_id, recipient, email_body)

        if result:
            await message.answer(f"–ü–∏—Å—å–º–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞ {recipient}!")
        else:
            await message.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ø–∏—Å—å–º–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

        del email_draft[user_id]  # –û—á–∏—â–∞–µ–º —á–µ—Ä–Ω–æ–≤–∏–∫


# –§—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–∏—Å—å–º–∞ —á–µ—Ä–µ–∑ Microsoft Graph API
def send_email(user_id, recipient, email_body):
    access_token = r.get(user_id)
    if not access_token:
        return False

    headers = {
        "Authorization": f"Bearer {access_token}",
        "Content-Type": "application/json"
    }

    email_data = {
        "message": {
            "subject": "–°–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ Telegram –±–æ—Ç–∞",
            "body": {
                "contentType": "Text",
                "content": email_body
            },
            "toRecipients": [
                {"emailAddress": {"address": recipient}}
            ]
        },
        "saveToSentItems": "true"
    }

    url = "https://graph.microsoft.com/v1.0/me/sendMail"
    response = requests.post(url, json=email_data, headers=headers)

    return response.status_code == 202

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
async def main():
    await bot.delete_webhook(drop_pending_updates=True)  # –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())


